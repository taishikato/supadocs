name: Reindex Documentation

on:
  push:
    paths:
      - "**/*.md"
      - "**/*.mdx"
      - ".github/workflows/reindex.yml"
      - "supabase/functions/reindex/**"
  pull_request:
    paths:
      - "**/*.md"
      - "**/*.mdx"
      - ".github/workflows/reindex.yml"
      - "supabase/functions/reindex/**"

jobs:
  reindex:
    name: Trigger Supabase Edge Function
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect changed Markdown files
        id: changes
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/*.md
            **/*.mdx

      - name: Compute raw base URL
        id: meta
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            REF="${{ github.event.pull_request.head.sha }}"
          else
            REF="${{ github.sha }}"
          fi
          echo "base_url=https://raw.githubusercontent.com/${{ github.repository }}/$REF/" >> "$GITHUB_OUTPUT"

      - name: Skip when no docs changed
        if: steps.changes.outputs.any_changed != 'true'
        run: echo "No Markdown changes detected; skipping reindex call."

      - name: Call reindex Edge Function
        if: steps.changes.outputs.any_changed == 'true'
        env:
          EDGE_FUNCTION_URL: ${{ secrets.SUPABASE_REINDEX_FUNCTION_URL }}
          EDGE_FUNCTION_SECRET: ${{ secrets.EDGE_FUNCTION_REINDEX_SECRET }}
          BASE_URL: ${{ steps.meta.outputs.base_url }}
          ADDED_FILES: ${{ steps.changes.outputs.added_files }}
          MODIFIED_FILES: ${{ steps.changes.outputs.modified_files }}
          DELETED_FILES: ${{ steps.changes.outputs.deleted_files }}
        run: |
          set -euo pipefail

          if [ -z "${EDGE_FUNCTION_URL:-}" ]; then
            echo "SUPABASE_REINDEX_FUNCTION_URL secret is not configured." >&2
            exit 1
          fi

          if [ -z "${EDGE_FUNCTION_SECRET:-}" ]; then
            echo "EDGE_FUNCTION_REINDEX_SECRET secret is not configured." >&2
            exit 1
          fi

          python - <<'PYTHON'
            import json
            import os
            import sys
            import urllib.error
            import urllib.request


            def parse_list(value: str) -> list[str]:
                if not value:
                    return []
                items = []
                for entry in value.replace(",", " ").split():
                    entry = entry.strip()
                    if entry:
                        items.append(entry)
                return items


            def deduplicate(items):
                seen = set()
                result = []
                for item in items:
                    if item not in seen:
                        seen.add(item)
                        result.append(item)
                return result


            added = parse_list(os.environ.get("ADDED_FILES", ""))
            modified = parse_list(os.environ.get("MODIFIED_FILES", ""))
            deleted = parse_list(os.environ.get("DELETED_FILES", ""))

            changed = deduplicate(added + modified)
            deleted = deduplicate(deleted)

            payload = {
                "repoRawBaseUrl": os.environ["BASE_URL"],
                "changedPaths": changed,
                "deletedPaths": deleted,
            }

            data = json.dumps(payload).encode("utf-8")
            url = os.environ["EDGE_FUNCTION_URL"]
            secret = os.environ["EDGE_FUNCTION_SECRET"]

            request = urllib.request.Request(
                url=url,
                data=data,
                headers={
                    "Content-Type": "application/json",
                    "x-edge-secret": secret,
                },
                method="POST",
            )

            try:
                with urllib.request.urlopen(request) as response:
                    body = response.read().decode("utf-8", errors="replace")
                    status = response.status
                    print(f"Edge function responded with status {status}")
                    print(body)
                    if status >= 400:
                        sys.exit(1)
            except urllib.error.HTTPError as error:
                body = error.read().decode("utf-8", errors="replace")
                print(f"Edge function error: {error.code}", file=sys.stderr)
                print(body, file=sys.stderr)
                sys.exit(1)
            except Exception as exc:
                print(f"Edge function request failed: {exc}", file=sys.stderr)
                sys.exit(1)
          PYTHON
